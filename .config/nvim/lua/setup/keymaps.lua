local no_remap_opt = { noremap = true }
local silent_opt = { silent = true }
local no_remap_silent_opt = { noremap = true, silent = true }
local no_remap_silent_expr_opt = { noremap = true, silent = true, expr = true }

local keymap_table = {
    {
        shortcut = 'k',
        cmd = "v:count == 0 ? 'gk' : 'k'",
        opts = no_remap_silent_expr_opt,
        modes = { 'n' },
        description = 'gk if no v:count',
        enabled = true,
    },
    {
        shortcut = 'j',
        cmd = "v:count == 0 ? 'gj' : 'j'",
        opts = no_remap_silent_expr_opt,
        modes = { 'n' },
        description = 'gj if no v:count',
        enabled = true,
    },
    {
        shortcut = '<M-n>',
        cmd = function()
            require('setup.neorg').open_workspace_notes()
        end,
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Open Notes for Current Project',
        enabled = true,
    },
    {
        shortcut = 's',
        cmd = function()
            require('flash').jump()
        end,
        opts = no_remap_opt,
        modes = { 'n', 'x', 'o' },
        description = 'Flash',
        enabled = true,
    },
    {
        shortcut = 'S',
        cmd = function()
            require('flash').treesitter()
        end,
        opts = no_remap_opt,
        modes = { 'n', 'x', 'o' },
        description = 'Flash Treesitter',
        enabled = true,
    },
    {
        shortcut = 'r',
        cmd = function()
            require('flash').remote()
        end,
        opts = no_remap_opt,
        modes = { 'o' },
        description = 'Flash Remote',
        enabled = true,
    },
    {
        shortcut = 'R',
        cmd = function()
            require('flash').treesitter_search()
        end,
        opts = no_remap_opt,
        modes = { 'x', 'o' },
        description = 'Flash Treesitter Search',
        enabled = true,
    },
    {
        shortcut = ']c',
        cmd = function()
            if vim.wo.diff then
                return ']c'
            end
            vim.schedule(function()
                require('gitsigns').next_hunk()
            end)
            return '<Ignore>'
        end,
        opts = { expr = true },
        modes = { 'n' },
        description = 'Next git hunk',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '[c',
        cmd = function()
            if vim.wo.diff then
                return '[c'
            end
            vim.schedule(function()
                require('gitsigns').prev_hunk()
            end)
            return '<Ignore>'
        end,
        opts = { expr = true },
        modes = { 'n' },
        description = 'Previous git hunk',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '+',
        cmd = '<C-a>',
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Increment number',
        enabled = true,
    },
    {
        shortcut = '-',
        cmd = '<C-x>',
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Decrement number',
        enabled = true,
    },
    {
        shortcut = '<C-a>',
        cmd = 'gg<S-v>G',
        opts = {},
        modes = { 'n' },
        description = 'Select all',
        enabled = true,
    },
    {
        shortcut = '<M-p>',
        cmd = '<cmd>lua Snacks.picker.buffers()<CR>',
        opts = no_remap_silent_opt,
        modes = { 'n' },
        description = 'Open buffers',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<C-p>',
        cmd = '<cmd>lua Snacks.picker.files()<CR>',
        opts = no_remap_silent_opt,
        modes = { 'n' },
        description = 'Open file in workspace',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<C-t>',
        cmd = ':Tabby jump_to_tab<CR>',
        opts = no_remap_silent_opt,
        modes = { 'n' },
        description = 'Select tab',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<M-r>',
        cmd = ':e!<CR>',
        opts = no_remap_silent_opt,
        modes = { 'n' },
        description = 'Refresh buffer',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<M-w>',
        cmd = function()
            require('auto-session.session-lens').search_session()
        end,
        opts = no_remap_silent_opt,
        modes = { 'n' },
        description = 'Open saved session',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<M-t>',
        cmd = ':Trouble diagnostics toggle focus=true<CR>',
        opts = no_remap_silent_opt,
        modes = { 'n' },
        description = 'Show diagnostics pane',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = 'n',
        cmd = 'nzz',
        opts = no_remap_silent_opt,
        modes = { 'n' },
        description = 'Center search navigation',
        enabled = true,
    },
    {
        shortcut = 'p',
        cmd = '<Cmd>silent! normal! "_dP<CR>',
        opts = no_remap_opt,
        modes = { 'x' },
        description = "Smarter Paste in Visual (won't yank deleted content)",
        enabled = true,
    },
    {
        shortcut = 'dd',
        cmd = function()
            if vim.api.nvim_get_current_line():match('^%s*$') then
                return '"_dd'
            else
                return 'dd'
            end
        end,
        opts = no_remap_silent_expr_opt,
        modes = { 'n' },
        description = "Smarter DD (empty lines won't be yanked)",
        enabled = true,
    },
    {
        shortcut = 'N',
        cmd = 'Nzz',
        opts = no_remap_silent_opt,
        modes = { 'n' },
        description = 'Center search navigation',
        enabled = true,
    },
    {
        shortcut = '*',
        cmd = '*zz',
        opts = no_remap_silent_opt,
        modes = { 'n' },
        description = 'Center search navigation',
        enabled = true,
    },
    {
        shortcut = '#',
        cmd = '#zz',
        opts = no_remap_silent_opt,
        modes = { 'n' },
        description = 'Center search navigation',
        enabled = true,
    },
    {
        shortcut = 'g*',
        cmd = 'g*zz',
        opts = no_remap_silent_opt,
        modes = { 'n' },
        description = 'Center search navigation',
        enabled = true,
    },
    {
        shortcut = '?',
        cmd = '?\\v',
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Improve search',
        enabled = true,
    },
    {
        shortcut = '/',
        cmd = '/\\v',
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Improve search',
        enabled = true,
    },
    {
        shortcut = '\\',
        cmd = '/@',
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Improve search',
        enabled = true,
    },
    {
        shortcut = '%s/',
        cmd = '%sm/',
        opts = no_remap_opt,
        modes = { 'c' },
        description = 'Improve search',
        enabled = true,
    },
    {
        shortcut = '<F2>',
        cmd = ':lua MiniFiles.open()<CR>',
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Toggle File Manager',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<C-x>',
        cmd = ':lua Snacks.bufdelete()<CR>',
        opts = no_remap_silent_opt,
        modes = { 'n' },
        description = 'Close current buffer',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<C-S-x>',
        cmd = ':lua Snacks.bufdelete.all()<CR>',
        opts = no_remap_silent_opt,
        modes = { 'n' },
        description = 'Close call buffers',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<M><left>',
        cmd = function()
            require('setup.apple').music:previous_track()
        end,
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Previous Song (Apple Music)',
        enabled = true,
    },
    {
        shortcut = '<M><right>',
        cmd = function()
            require('setup.apple').music:next_track()
        end,
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Next Song (Apple Music)',
        enabled = true,
    },
    {
        shortcut = '<M-/>',
        cmd = function()
            require('setup.apple').music:play_pause()
        end,
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Play/Pause (Apple Music)',
        enabled = true,
    },
    {
        shortcut = '<M-g>',
        cmd = ':nohlsearch<CR>',
        opts = no_remap_silent_opt,
        modes = { 'n', 'v' },
        description = 'Clear search',
        enabled = true,
    },
    {
        shortcut = 'H',
        cmd = '^',
        opts = {},
        modes = { 'n', 'v' },
        description = 'Jump to start of the line',
        enabled = true,
    },
    {
        shortcut = 'L',
        cmd = '$',
        opts = {},
        modes = { 'n', 'v' },
        description = 'Jump to end of the line',
        enabled = true,
    },
    {
        shortcut = '<C-h>',
        cmd = '<Left>',
        opts = no_remap_opt,
        modes = { 'i', 'c' },
        description = 'Move cursor left',
        enabled = true,
    },
    {
        shortcut = '<C-j>',
        cmd = '<Down>',
        opts = no_remap_opt,
        modes = { 'i', 'c' },
        description = 'Move cursor down',
        enabled = true,
    },
    {
        shortcut = '<C-k>',
        cmd = '<Up>',
        opts = no_remap_opt,
        modes = { 'i', 'c' },
        description = 'Move cursor up',
        enabled = true,
    },
    {
        shortcut = '<C-l>',
        cmd = '<Right>',
        opts = no_remap_opt,
        modes = { 'i', 'c' },
        description = 'Move cursor right',
        enabled = true,
    },
    {
        shortcut = '<C-h>',
        cmd = ':ZellijNavigateLeft<CR>',
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Focus on window to the left',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<C-l>',
        cmd = ':ZellijNavigateRight<CR>',
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Focus on window to the right',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<C-k>',
        cmd = ':ZellijNavigateUp<CR>',
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Focus on window up',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<C-j>',
        cmd = ':ZellijNavigateDown<CR>',
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Focus on window down',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<right>',
        cmd = '<CMD>vertical resize +2<CR>',
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Increase window width',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<left>',
        cmd = '<CMD>vertical resize -2<CR>',
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Decrease window width',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<up>',
        cmd = '<CMD>resize +2<CR>',
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Increase window height',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<down>',
        cmd = '<CMD>resize -2<CR>',
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Decrease window height',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<C-d>',
        cmd = '<C-o>x',
        opts = no_remap_opt,
        modes = { 'i' },
        description = 'Delete char forward in insert mode',
        enabled = true,
    },
    {
        shortcut = '<F1>',
        cmd = ':Trouble todo toggle<CR>',
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Toggle todo list',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<C-s>',
        cmd = ':wa<CR>',
        opts = no_remap_silent_opt,
        modes = { 'n' },
        description = 'Savel all',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<C-s>',
        cmd = '<C-o>:wa<CR>',
        opts = no_remap_silent_opt,
        modes = { 'i' },
        description = 'Savel all',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '[g',
        cmd = vim.diagnostic.goto_prev,
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Go to previous diagnostic',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = ']g',
        cmd = vim.diagnostic.goto_next,
        opts = no_remap_opt,
        modes = { 'n' },
        description = 'Go to next diagnostic',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = 'gb',
        cmd = ':lua Snacks.gitbrowse()<CR>',
        opts = silent_opt,
        modes = { 'n' },
        description = 'Open file in remeote repo',
        enabled = true,
    },
    {
        shortcut = 'gx',
        cmd = '<CMD>Browse<CR>',
        opts = silent_opt,
        modes = { 'n', 'x' },
        description = 'Open links in browser',
        enabled = true,
    },
    {
        shortcut = 'gD',
        cmd = vim.lsp.buf.declaration,
        opts = silent_opt,
        modes = { 'n' },
        description = 'Go to declaration',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = 'gt',
        cmd = vim.lsp.buf.type_definition,
        opts = silent_opt,
        modes = { 'n' },
        description = 'Go to type definition',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = 'gd',
        cmd = vim.lsp.buf.definition,
        opts = silent_opt,
        modes = { 'n' },
        description = 'Go to definition',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = 'gw',
        cmd = ':vsplit | lua vim.lsp.buf.definition()<CR>',
        opts = silent_opt,
        modes = { 'n' },
        description = 'Go to definition',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = 'gi',
        cmd = vim.lsp.buf.implementation,
        opts = silent_opt,
        modes = { 'n' },
        description = 'Go to implementation',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = 'gr',
        cmd = function()
            vim.lsp.buf.references({ includeDeclaration = false })
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'Find references',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = 'grn',
        cmd = function()
            Snacks.words.jump(1, true)
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'Go to next reference',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = 'grp',
        cmd = function()
            Snacks.words.jump(-1, true)
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'Go to previous reference',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<M-s>',
        cmd = vim.lsp.buf.signature_help,
        opts = silent_opt,
        modes = { 'i' },
        description = 'Signature help',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<M-s>',
        cmd = vim.lsp.buf.signature_help,
        opts = silent_opt,
        modes = { 'n' },
        description = 'Signature help',
        enabled = not vim.g.vscode,
    },
    -- call twice make the cursor go into the float window. good for navigating big docs
    {
        shortcut = 'K',
        cmd = function()
            local winid = require('ufo').peekFoldedLinesUnderCursor()
            if not winid then
                vim.lsp.buf.hover()
            end
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'Show hover popup or folded preview',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = 'zR',
        cmd = function()
            require('ufo').openAllFolds()
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'Open All Folds',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = 'zM',
        cmd = function()
            require('ufo').closeAllFolds()
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'Close All Folds',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<M-f>',
        cmd = function()
            vim.lsp.buf.format({ async = false })
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'Format code',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<F4>',
        cmd = function()
            require('dap').repl.toggle()
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'DAP Toggle repl',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<F5>',
        cmd = function()
            require('dap').continue()
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'DAP Continue',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<S-F5>',
        cmd = function()
            require('dap').close()
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'DAP Stop',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<C-F5>',
        cmd = function()
            require('dap').run_last()
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'DAP Run last',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<F6>',
        cmd = function()
            require('dap').pause()
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'DAP Pause',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<F9>',
        cmd = function()
            require('dap').toggle_breakpoint()
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'DAP Toggle breakpoint',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<S-F9>',
        cmd = function()
            require('dap').set_breakpoint(vim.fn.input('Breakpoint condition: '))
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'DAP Set breakpoint with condition',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<C-F9>',
        cmd = function()
            require('dap').set_breakpoint(nil, nil, vim.fn.input('Log point message: '))
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'DAP Set logpoint',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<F10>',
        cmd = function()
            require('dap').step_over()
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'DAP Step over',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<S-F10>',
        cmd = function()
            require('dap').run_to_cursor()
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'DAP Run to cursor',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<F11>',
        cmd = function()
            require('dap').step_into()
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'DAP Step into',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<S-F11>',
        cmd = function()
            require('dap').step_out()
        end,
        opts = silent_opt,
        modes = { 'n' },
        description = 'DAP Step out',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<F7>',
        cmd = function()
            require('dap.ui.widgets').hover()
        end,
        opts = silent_opt,
        modes = { 'x' },
        description = 'DAP Hover',
        enabled = not vim.g.vscode,
    },
    {
        shortcut = '<leader>u',
        cmd = function()
            require('undotree').toggle()
        end,
        description = 'Toggle undotree',
        modes = { 'n' },
        enabled = not vim.g.vscode,
        opts = silent_opt,
    },
    {
        shortcut = '<leader>;',
        cmd = function()
            require('dropbar.api').pick()
        end,
        description = 'Pick symbols in winbar',
        modes = { 'n' },
        enabled = not vim.g.vscode,
        opts = silent_opt,
    },
    {
        shortcut = '[;',
        cmd = function()
            require('dropbar.api').goto_context_start()
        end,
        description = 'Go to start of current context',
        modes = { 'n' },
        enabled = not vim.g.vscode,
        opts = silent_opt,
    },
    {
        shortcut = '];',
        cmd = function()
            require('dropbar.api').select_next_context()
        end,
        description = 'Select next context',
        modes = { 'n' },
        enabled = not vim.g.vscode,
        opts = silent_opt,
    },
    -- which_key
    {
        shortcut = '<leader>a',
        cmd = 'rhs',
        description = 'Aerial',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>aa',
        cmd = ':AerialOpenAll<CR>',
        description = 'Open All',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>ac',
        cmd = ':AerialCloseAll<CR>',
        description = 'Close All',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>ai',
        cmd = ':AerialInfo<CR>',
        description = 'Info',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>as',
        cmd = ':AerialTreeSyncFolds<CR>',
        description = 'Sync code folding',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>at',
        cmd = ':AerialToggle<CR>',
        description = 'Toggle',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>d',
        cmd = 'rhs',
        description = 'Debug',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    { -- TODO: implement for snacks and enable
        shortcut = '<leader>db',
        cmd = '<cmd>lua require("telescope").extensions.dap.list_breakpoints()<CR>',
        description = 'Breakpoints',
        opts = no_remap_opt,
        enabled = false,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>f',
        cmd = 'rhs',
        description = 'File',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>g',
        cmd = 'rhs',
        description = 'Git',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>gb',
        cmd = '<cmd>lua Snacks.picker.git_branches()<CR>',
        description = 'Branches',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>gc',
        cmd = '<cmd>lua Snacks.picker.git_log()<CR>',
        description = 'Commit Log',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>gd',
        cmd = ':DiffviewOpen<CR>',
        description = 'Open Diff View',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>ge',
        cmd = ':DiffviewFocusFiles<CR>',
        description = 'Diff View Focus Files',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>gf',
        cmd = '<cmd>lua Snacks.picker.git_files()<CR>',
        description = 'Files',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>gg',
        cmd = '<cmd>lua Snacks.picker.git_diff()<CR>',
        description = 'Git Diff (Hunks)',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>gh',
        cmd = ':DiffviewFileHistory<CR>',
        description = 'Diff View File History',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>gl',
        cmd = '<cmd>lua Snacks.picker.git_log_file()<CR>',
        description = 'Commit Log Current Buffer',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>gr',
        cmd = ':DiffviewRefresh<CR>',
        description = 'Diff View Refresh',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>gs',
        cmd = '<cmd>lua Snacks.picker.git_status()<CR>',
        description = 'Status',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>gt',
        cmd = '<cmd>lua Snacks.picker.git_stash()<CR>',
        description = 'Stash',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>gx',
        cmd = ':DiffviewClose<CR>',
        description = 'Close Diff View',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>h',
        cmd = 'rhs',
        description = 'Gitsigns',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>hB',
        cmd = '<cmd>lua require("gitsigns").blame_line({full=true, ignore_whitespace = true})<CR>',
        description = 'Blame line',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>hR',
        cmd = ':Gitsigns reset_buffer<CR>',
        description = 'Reset buffer',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>hS',
        cmd = ':Gitsigns stage_buffer<CR>',
        description = 'Stage buffer',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>hb',
        cmd = ':Gitsigns toggle_current_line_blame<CR>',
        description = 'Toggle blame current line',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>hd',
        cmd = ':Gitsigns diffthis<CR>',
        description = 'Diff this',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>hp',
        cmd = ':Gitsigns preview_hunk<CR>',
        description = 'Preview hunk',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>hr',
        cmd = ':Gitsigns reset_hunk<CR>',
        description = 'Reset hunk',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>hs',
        cmd = ':Gitsigns stage_hunk<CR>',
        description = 'Stage hunk',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>ht',
        cmd = ':Gitsigns toggle_deleted<CR>',
        description = 'Toggle deleted hunks',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>hu',
        cmd = ':Gitsigns undo_stage_hunk<CR>',
        description = 'Undo stage hunk',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>l',
        cmd = 'rhs',
        description = 'LSP',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>la',
        cmd = '<cmd>lua vim.lsp.buf.code_action()<CR>',
        description = 'Code Actions',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>lb',
        cmd = '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>',
        description = 'Show line diagnostics',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>lc',
        cmd = function()
            vim.b.autoformat = not vim.b.autoformat
        end,
        description = 'Toggle autoformat',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>ld',
        cmd = '<cmd>lua Snacks.picker.lsp_definitions()<CR>',
        description = 'Definitions',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>lf',
        cmd = '<cmd>lua vim.lsp.buf.format({ async = false })<CR>',
        description = 'Format',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>li',
        cmd = '<cmd>lua Snacks.picker.lsp_implementations()<CR>',
        description = 'Implementations',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>ll',
        cmd = '<cmd>lua vim.lsp.codelens.run()<CR>',
        description = 'Code Lens',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>lm',
        cmd = '<cmd>lua vim.lsp.buf.rename()<CR>',
        description = 'Rename symbol',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>lq',
        cmd = '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>',
        description = 'Diagnostic set loclist',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>lr',
        cmd = '<cmd>lua Snacks.picker.lsp_references()<CR>',
        description = 'References',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>ls',
        cmd = '<cmd>lua Snacks.picker.lsp_symbols()<CR>',
        description = 'Document Symbols',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>lt',
        cmd = '<cmd>lua Snacks.picker.lsp_type_definitions()<CR>',
        description = 'Type Definitions',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>lw',
        cmd = '<cmd>lua Snacks.picker.lsp_workspace_symbols()<CR>',
        description = 'Workspace Symbols',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>m',
        cmd = 'rhs',
        description = 'Music',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>ml',
        cmd = function()
            require('setup.apple').music:playlists()
        end,
        description = 'Playlists',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>mp',
        cmd = function()
            require('setup.apple').music:play_pause()
        end,
        description = 'Play/Pause',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>mn',
        cmd = function()
            require('setup.apple').music:next_track()
        end,
        description = 'Next Track',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>mr',
        cmd = function()
            require('setup.apple').music:previous_track()
        end,
        description = 'Previous Track',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>n',
        cmd = 'rhs',
        description = 'Refactoring',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>nI',
        cmd = ':Refactor inline_func',
        description = 'Inline Function',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>nb',
        cmd = ':Refactor extract_block',
        description = 'Extract Block',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>nc',
        cmd = '<cmd>lua require("refactoring").debug.cleanup({})<CR>',
        description = 'Cleanup',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>nf',
        cmd = ':Refactor extract_block_to_file',
        description = 'Extract Block to File',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>ni',
        cmd = ':Refactor inline_var',
        description = 'Inline Variable',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>np',
        cmd = '<cmd>lua require("refactoring").debug.printf()<CR>',
        description = 'Printf',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>nr',
        cmd = '<cmd>lua require("refactoring").select_refactor()<CR>',
        description = 'Refactors',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>nv',
        cmd = '<cmd>lua require("refactoring").debug.print_var()<CR>',
        description = 'Print Variable',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>o',
        cmd = 'rhs',
        description = 'Overseer',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>oa',
        cmd = ':OverseerTaskAction<CR>',
        description = 'Select a task to run an action on',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>ob',
        cmd = ':OverseerBuild<CR>',
        description = 'Open task builder',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>oc',
        cmd = ':OverseerRunCmd<CR>',
        description = 'Run shell command',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>od',
        cmd = ':OverseerDeleteBundle<CR>',
        description = 'Delete',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>ol',
        cmd = ':OverseerLoadBundle<CR>',
        description = 'Load',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>oq',
        cmd = ':OverseerQuickAction<CR>',
        description = 'Run action on a task',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>or',
        cmd = ':OverseerRun<CR>',
        description = 'Run task',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>os',
        cmd = ':OverseerSaveBundle<CR>',
        description = 'Save',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>ot',
        cmd = ':OverseerToggle<CR>',
        description = 'Overseer Toggle',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>p',
        cmd = 'rhs',
        description = 'Grep',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>pw',
        cmd = '<cmd>lua Snacks.picker.grep_word()<CR>',
        description = 'Grep Word',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>pl',
        cmd = '<cmd>lua Snacks.picker.grep()<CR>',
        description = 'Live Grep',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>pb',
        cmd = '<cmd>lua Snacks.picker.grep_buffers()<CR>',
        description = 'Grep Buffers',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>r',
        cmd = 'rhs',
        description = 'Rust',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>ra',
        cmd = ':RustLsp hover actions<CR>',
        description = 'Hover Actions',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>rb',
        cmd = ':RustLsp moveItem down<CR>',
        description = 'Move Item Down',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>rc',
        cmd = ':RustLsp openCargo<CR>',
        description = 'Open Cargo.toml',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>rd',
        cmd = ':RustLsp debuggables<CR>',
        description = 'Debuggables',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>rg',
        cmd = ':RustLsp renderDiagnostic current<CR>',
        description = 'Render Diagnostic',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>re',
        cmd = ':RustLsp explainError current<CR>',
        description = 'Explain Error',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>rk',
        cmd = ':RustLsp crateGraph<CR>',
        description = 'View Crate Graph',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>rh',
        cmd = ':RustLsp hover range<CR>',
        description = 'Range Hover Actions',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>rj',
        cmd = ':RustLsp joinLines<CR>',
        description = 'Join Lines',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>rm',
        cmd = ':RustLsp expandMacro<CR>',
        description = 'Expand Macro',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>rp',
        cmd = ':RustLsp parentModule<CR>',
        description = 'Parent Module',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>rx',
        cmd = ':RustLsp openDocs<CR>',
        description = 'Open Rust Docs',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>rr',
        cmd = ':RustLsp runnables<CR>',
        description = 'Runnables',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>rs',
        cmd = ':RustLsp syntaxTree<CR>',
        description = 'View Syntax Tree',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>ru',
        cmd = ':RustLsp moveItem up<CR>',
        description = 'Move Item Up',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>s',
        cmd = 'rhs',
        description = 'Shell',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>sh',
        cmd = function()
            require('here-term').toggle_terminal()
        end,
        description = 'Toggle Terminal',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>ss',
        cmd = function()
            require('here-term').kill_terminal()
        end,
        description = 'Kill Terminal',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>v',
        cmd = 'rhs',
        description = 'Vim',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>va',
        cmd = '<cmd>lua Snacks.picker.autocmds()<CR>',
        description = 'Autocommands',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>vc',
        cmd = '<cmd>lua Snacks.picker.commands()<CR>',
        description = 'Commands',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>ve',
        cmd = '<cmd>lua Snacks.picker.spelling()<CR>',
        description = 'Spell Suggestions',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>vh',
        cmd = '<cmd>lua Snacks.picker.help()<CR>',
        description = 'Help Pages',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>vb',
        cmd = '<cmd>lua Snacks.picker.command_history()<CR>',
        description = 'Command History',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>vj',
        cmd = '<cmd>lua Snacks.picker.jumps()<CR>',
        description = 'Jump List',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>vk',
        cmd = '<cmd>lua Snacs.picker.marks()<CR>',
        description = 'Marks',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>vl',
        cmd = '<cmd>lua Snacs.picker.loclist()<CR>',
        description = 'Location List',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>vm',
        cmd = '<cmd>lua Snacs.picker.man()<CR>',
        description = 'Man Pages',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>vo',
        cmd = '<cmd>lua Snacks.picker.colorschemes()<CR>',
        description = 'Colorscheme',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>vi',
        cmd = '<cmd>lua Snacks.picker.highlights()<CR>',
        description = 'Highlights',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>vp',
        cmd = '<cmd>lua Snacks.picker.resume()<CR>',
        description = 'Resume Last Picker',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>vz',
        cmd = '<cmd>lua Snacks.picker.lazy()<CR>',
        description = 'Lazy Plugins',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>vq',
        cmd = '<cmd>lua Snacks.picker.qflist()<CR>',
        description = 'Quickfix List',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>vr',
        cmd = '<cmd>lua Snacks.picker.registers()<CR>',
        description = 'Registers',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>vs',
        cmd = '<cmd>lua Snacks.picker.search_history()<CR>',
        description = 'Search History',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>vy',
        cmd = '<cmd>lua Snacks.picker.keymaps()<CR>',
        description = 'Normal Mode Keymaps',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'n' },
    },
    {
        shortcut = '<leader>c',
        cmd = '"*y',
        description = 'Copy selection to system clipboard',
        modes = { 'v' },
        opts = no_remap_opt,
        enabled = true,
    },
    {
        shortcut = '<leader>h',
        cmd = 'rhs',
        description = 'Gitsigns',
        opts = no_remap_opt,
        enabled = true,
        modes = { 'v' },
    },
    {
        shortcut = '<leader>hr',
        cmd = function() end,
        description = 'Reset Hunk',
        opts = no_remap_opt,
        modes = { 'v' },
        enabled = true,
    },
    {
        shortcut = '<leader>hs',
        cmd = function() end,
        description = 'Stage Hunk',
        opts = no_remap_opt,
        modes = { 'v' },
        enabled = true,
    },
    {
        shortcut = '<leader>l',
        cmd = 'rhs',
        description = 'LSP',
        modes = { 'v' },
        opts = no_remap_opt,
        enabled = true,
    },
    {
        shortcut = '<leader>la',
        cmd = '<cmd>lua vim.lsp.buf.range_code_action()<CR>',
        description = 'Range Code Action',
        opts = no_remap_opt,
        modes = { 'v' },
        enabled = true,
    },
    {
        shortcut = '<leader>n',
        cmd = 'rhs',
        description = 'Refactoring',
        modes = { 'v' },
        opts = no_remap_opt,
        enabled = true,
    },
    {
        shortcut = '<leader>ne',
        cmd = ':Refactor extract',
        description = 'Extract',
        opts = no_remap_opt,
        modes = { 'v' },
        enabled = true,
    },
    {
        shortcut = '<leader>nf',
        cmd = ':Refactor extract_to_file ',
        description = 'Extract to file',
        opts = no_remap_opt,
        modes = { 'v' },
        enabled = true,
    },
    {
        shortcut = '<leader>ni',
        cmd = ':Refactor inline_var',
        description = 'Inline Variable',
        opts = no_remap_opt,
        modes = { 'v' },
        enabled = true,
    },
    {
        shortcut = '<leader>np',
        cmd = '<cmd>lua require("refactoring").debug.print_var()<CR>',
        description = 'Print Variable',
        opts = no_remap_opt,
        modes = { 'v' },
        enabled = true,
    },
    {
        shortcut = '<leader>nr',
        cmd = '<cmd>lua require("refactoring").select_refactor()<CR>',
        description = 'Refactors',
        opts = no_remap_opt,
        modes = { 'v' },
        enabled = true,
    },
    {
        shortcut = '<leader>nv',
        cmd = ':Refactor extract_var ',
        description = 'Extract Variable',
        opts = no_remap_opt,
        modes = { 'v' },
        enabled = true,
    },
}

return {
    map_keys = function()
        for _, keymap in pairs(keymap_table) do
            if keymap.enabled then
                local opts = vim.tbl_extend('force', { desc = keymap.description }, keymap.opts)
                vim.keymap.set(keymap.modes, keymap.shortcut, keymap.cmd, opts)
            end
        end
    end,
}
